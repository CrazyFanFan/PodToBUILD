load('//:build_extensions.bzl', 'pch_with_name_hint')
# Add a config setting release for compilation mode
# Assume that people are using `opt` for release mode
# see the bazel user manual for more information
# https://bazel.build/versions/master/docs/bazel-user-manual.html
native.config_setting(
  name = "release",
  values = {
    "compilation_mode": "opt"
  }
  )
config_setting(
  name = "iosCase",
  values = {
    "cpu": "powerpc1"
  }
  )
config_setting(
  name = "osxCase",
  values = {
    "cpu": "powerpc2"
  }
  )
config_setting(
  name = "tvosCase",
  values = {
    "cpu": "powerpc3"
  }
  )
objc_library(
  name = "IGListKit",
  hdrs = glob(
    [
      "bazel_support/Headers/Public/**/*.h"
    ],
    exclude_directories = 1
    ),
  pch = pch_with_name_hint(
    "IGListKit",
    [

    ]
    ),
  includes = [
    "bazel_support/Headers/Public/",
    "bazel_support/Headers/Public/IGListKit/"
  ],
  sdk_frameworks = select(
    {
      ":osxCase": [
        "Cocoa"
      ],
      ":tvosCase": [
        "UIKit"
      ],
      "//conditions:default": [
        "UIKit"
      ]
    }
    ),
  sdk_dylibs = [
    "c++"
  ],
  deps = [
    ":IGListKit_Default"
  ],
  copts = [
    "-stdlib=c++11",
    "-stdlib=libc++"
  ] + select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1"
      ]
    }
    ),
  visibility = [
    "//visibility:public"
  ]
  )
objc_library(
  name = "IGListKit_Diffing",
  srcs = select(
    {
      "//conditions:default": glob(
        [
          "Source/Common/**/*.m",
          "Source/Common/**/*.mm"
        ],
        exclude = [
          "Source/**/*.m",
          "Source/**/*.mm"
        ],
        exclude_directories = 1
        ),
      ":tvosCase": glob(
        [
          "Source/Common/**/*.m",
          "Source/Common/**/*.mm"
        ],
        exclude = [
          "Source/**/*.m",
          "Source/**/*.mm"
        ],
        exclude_directories = 1
        )
    }
    ),
  hdrs = glob(
    [
      "Source/Common/**/*.h",
      "bazel_support/Headers/Public/**/*.h"
    ],
    exclude_directories = 1
    ),
  pch = pch_with_name_hint(
    "IGListKit",
    [
      "Source/**/*.pch"
    ]
    ),
  includes = [
    "bazel_support/Headers/Public/",
    "bazel_support/Headers/Public/IGListKit/"
  ],
  sdk_frameworks = select(
    {
      ":osxCase": [
        "Cocoa"
      ],
      ":tvosCase": [
        "UIKit"
      ],
      "//conditions:default": [
        "UIKit"
      ]
    }
    ),
  sdk_dylibs = [
    "c++"
  ],
  copts = [
    "-stdlib=c++11",
    "-stdlib=libc++"
  ] + select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1"
      ]
    }
    ),
  visibility = [
    "//visibility:public"
  ]
  )
objc_library(
  name = "IGListKit_Default",
  srcs = select(
    {
      "//conditions:default": glob(
        [
          "Source/**/*.m",
          "Source/**/*.mm"
        ],
        exclude_directories = 1
        ),
      ":tvosCase": glob(
        [
          "Source/**/*.m",
          "Source/**/*.mm"
        ],
        exclude_directories = 1
        )
    }
    ),
  hdrs = select(
    {
      "//conditions:default": glob(
        [
          "Source/**/*.h",
          "bazel_support/Headers/Public/**/*.h"
        ],
        exclude_directories = 1
        ),
      ":tvosCase": glob(
        [
          "Source/**/*.h",
          "bazel_support/Headers/Public/**/*.h"
        ],
        exclude_directories = 1
        )
    }
    ),
  pch = pch_with_name_hint(
    "IGListKit",
    [
      "Source/**/*.pch"
    ]
    ),
  includes = [
    "bazel_support/Headers/Public/",
    "bazel_support/Headers/Public/IGListKit/"
  ],
  sdk_frameworks = select(
    {
      ":osxCase": [
        "Cocoa"
      ],
      ":tvosCase": [
        "UIKit"
      ],
      "//conditions:default": [
        "UIKit"
      ]
    }
    ),
  sdk_dylibs = [
    "c++"
  ],
  deps = [
    ":IGListKit_Diffing"
  ],
  copts = [
    "-stdlib=c++11",
    "-stdlib=libc++"
  ] + select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1"
      ]
    }
    ),
  visibility = [
    "//visibility:public"
  ]
  )
